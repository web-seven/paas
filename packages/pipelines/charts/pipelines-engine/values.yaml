ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    acme.cert-manager.io/http01-edit-in-place: "true"
    cert-manager.io/cluster-issuer: "cert-manager-production"
    ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.org/redirect-to-https: "false"
    certmanager.k8s.io/acme-challenge-type: http01
  tls:
  - secretName: pipelines-engine-tls-certificate
    hosts:
      - pipelines-engine.paas.dev
  hosts:
    - host: pipelines-engine.paas.dev        
      paths: 
        - path: /    

global:
  useVaultSecrets: false

env:
  GITHUB_TOKEN: ""
  GITHUB_USER: ""
  NPM_TOKEN: ""

argo-workflows:
  useDefaultArtifactRepo: true
  artifactRepository:
    archiveLogs: true
    s3:
      accessKeySecret:
        name: pipelines-engine-minio
        key: accesskey
      secretKeySecret:
        name: pipelines-engine-minio
        key: secretkey
      insecure: true 
      bucket: workflows
      endpoint: "pipelines-engine-minio:9000"
  enabled: true
  installCRD: false
  createAggregateRoles: true
  singleNamespace: false
  nameOverride: workflows
  workflow:
    serviceAccount:
      create: true 
      name: "argo-workflow" 
    rbac:
      create: true
  controller:
    parallelism: 2
    tolerations: 
      - key: "nodeType"
        operator: "Equal"
        value: "pipelines-engine"
        effect: "NoSchedule"
    containerRuntimeExecutor: k8sapi
    logging:
      level: info
    persistence: 
      nodeStatusOffLoad: false
      archive: true
      postgresql:
        host: postgres
        port: 5432
        database: postgres
        tableName: workflows
        userNameSecret:
          name: argo-postgres-config
          key: username
        passwordSecret:
          name: argo-postgres-config
          key: password
    workflowDefaults: 
      spec:
        imagePullSecrets:
          - name: pipelines-engine-default-regcred
        templateDefaults:
          container:
            resources:
              requests:
                memory: 2Gi
                cpu: 1
        serviceAccountName: "argo-workflow" 
        synchronization:
          semaphore:
            configMapKeyRef:
              name: "argo-workflow-config"
              key: workflow
        tolerations:
        - key: "nodeType"
          operator: "Equal"
          value: "workflow"
          effect: "NoSchedule"
        activeDeadlineSeconds: 28800
        parallelism: 1
        ttlStrategy:
          secondsAfterCompletion: 120
          secondsAfterSuccess: 120
          secondsAfterFailure: 120
        podGC:
          strategy: OnWorkflowSuccess
  server:
    # baseHref: /workflows/
    createServiceAccount: true
    serviceAccount:
      name: argo-workflows-server
    serviceType: NodePort
    extraArgs:
      - "--auth-mode=sso"
    ingress:
      enabled: false
    tolerations: 
      - key: "nodeType"
        operator: "Equal"
        value: "pipelines-engine"
        effect: "NoSchedule"
    sso: 
      issuer: https://deployments.paas.dev/api/dex
      clientId:
        name: argo-workflows-sso
        key: client-id
      clientSecret:
        name: argo-workflows-sso
        key: client-secret
      redirectUrl: https://pipelines-engine.paas.dev/oauth2/callback
      scopes:
      - openid
      - profile
      - email

argo-events:
  enabled: true
  singleNamespace: false
  additionalServiceAccountRules:
    - apiGroups:
        - ""
      resources:
        - pods/log
        - pods/portforward
        - namespaces
      verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
    - apiGroups:
        - argoproj.io
      verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      resources:
        - workflows
        - applications
        - appprojects

postgresql:
  primary:
    persistence:
      enabled: true
  fullnameOverride: postgres
  auth:
    postgresPassword: postgres

minio:
  resources:
    requests:
      memory: 1Gi
  rootUser: minioadmin
  rootPassword: minioadmin
  persistence:
    enabled: true
    size: 300Mi


